"""
Django settings for StyliQ project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import environ, os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG')


ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost'])

AUTH_USER_MODEL = 'users.User'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_celery_beat',  # Commented out for Render deployment

    # Thirdâ€‘party
    'rest_framework',
    'drf_spectacular',
    # 'django_redis',  # Commented out for Render deployment

    # Your apps
    'users',
    'salons',
    'bookings',
    'notifications',
    'payments',
    'analytics',
    'otp',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# REST framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'StyliQ API',
    'DESCRIPTION': 'API documentation for the StyliQ salon booking platform',
    'VERSION': '1.0.0',
    # Optional: hide deprecated endpoints, customize tags, etc.
}



ROOT_URLCONF = 'StyliQ.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'StyliQ.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# Database configuration for Render deployment
import dj_database_url

# Check if we're on Render (DATABASE_URL will be set by Render)
# If DATABASE_URL contains 'db:5432', it's likely from Docker, so override it
database_url = env('DATABASE_URL', default='')

if 'db:5432' in database_url or not database_url:
    # Use Render PostgreSQL URL
    RENDER_DATABASE_URL = 'postgresql://styliq_user:DpZ1Id5skSDKl5eiQt1Wkfll9vj2yatf@dpg-d3huvuali9vc739979hg-a/styliq'
    DATABASES = {
        'default': dj_database_url.parse(RENDER_DATABASE_URL)
    }
else:
    # Use the provided DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            default='postgresql://styliq_user:DpZ1Id5skSDKl5eiQt1Wkfll9vj2yatf@dpg-d3huvuali9vc739979hg-a/styliq',
            conn_max_age=600
        )
    }

# Option 2: Individual environment variables (fallback)
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': env('POSTGRES_DB', default='styliq'),
#         'USER': env('POSTGRES_USER', default='styliq_user'),
#         'PASSWORD': env('POSTGRES_PASSWORD', default='DpZ1Id5skSDKl5eiQt1Wkfll9vj2yatf'),
#         'HOST': env('POSTGRES_HOST', default='dpg-d3huvuali9vc739979hg-a'),
#         'PORT': env('POSTGRES_PORT', default=5432),
#     }
# }

# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': env('REDIS_URL'),
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }  # Commented out for Render deployment
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # Commented out for Render deployment
# SESSION_CACHE_ALIAS = 'default'  # Commented out for Render deployment


# CELERY_BROKER_URL = 'redis://redis:6379/0'  # Commented out for Render deployment
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'  # Commented out for Render deployment




# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN  = env('TWILIO_AUTH_TOKEN')
TWILIO_FROM_NUMBER = env('TWILIO_FROM_NUMBER')



# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

from datetime import timedelta

SIMPLE_JWT = {
  'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
  'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
  'AUTH_HEADER_TYPES': ('Bearer',),
}
